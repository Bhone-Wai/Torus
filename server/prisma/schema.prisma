// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id           String         @id @default(uuid())
  sku          String         @unique
  title        String
  brand        String?
  description  String?
  length       Float?
  width        Float?
  height       Float?
  weight       Float?
  price        Float
  regularPrice Float?
  salePrice    Float?
  taxRate      Float?
  taxIncluded  Boolean        @default(false)
  quantity     Int            @default(0)
  status       ProductStatus    
  category     Category?      @relation(fields: [categoryId], references: [id])
  categoryId   String?
  images       ProductImage[]
  orderItems   OrderItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Category {
  id       String    @id @default(uuid())
  title    String    @unique
  products Product[]
}

model ProductImage {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  url       String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Order {
  id              String        @id @default(uuid())
  orderNumber     String        @unique
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  total           Float
  subtotal        Float
  taxAmount       Float
  shippingAddress String?
  billingAddress  String?
  notes           String?
  paymentStatus   PaymentStatus @default(PENDING)
  orderStatus     OrderStatus   @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model OrderItem {
  id           String  @id @default(uuid())
  order        Order   @relation(fields: [orderId], references: [id])
  orderId      String
  product      Product @relation(fields: [productId], references: [id])
  productId    String
  productTitle String
  productSku   String
  productImage String?
  price        Float
  quantity     Int
  taxAmount    Float?
  lineTotal    Float?
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  orders    Order[]
}

enum ProductStatus {
    ACTIVE
    INACTIVE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
